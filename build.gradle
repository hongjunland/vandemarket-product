plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.18-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
}

group = 'com.vandemarket'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    compileOnly 'org.projectlombok:lombok'
    //    security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-test'
    //    jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
    //    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {

    finalizedBy 'jacocoTestReport'
    useJUnitPlatform()
}

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    dependsOn test // 리포트 생성을 위해서는 test가 먼저 완료되어야 함
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/*Application*",
                            '**/*Request*',
                            '**/*JpaEntity*',
                            '**/*Response*',
                            '**/Swagger*',
                            '**/PasswordEncoderConfig*',
                            '**/JpaAuditingConfig*',
                            '**/common/**',
                            '**/*Builder*',
                            '**/*Q**'
                    ])
                })
        )
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            excludes = [
                    "**/*Application*",
                    '**/*Request*',
                    '**/*Response*',
                    '**/Swagger*',
                    '**/PasswordEncoderConfig*',
                    '**/JpaAuditingConfig*',
                    '**/common/**',
                    '**/*JpaEntity*',
                    '**/*Q**'
            ]
        }
    }
}
